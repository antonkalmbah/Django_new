"""
Django settings for news project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-whgd*k67&b4$#p8g6a5kzo*-6^4fermd&!ni-+2tre!%h7y16w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'project_news',
    'appointment',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'news.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
# }

# Для работы с PostgreSQL добавил поля:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Добавил из задания D6 на проверку отправки email писем (заготовка)
EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'anton.kalmbah'  # ваше имя пользователя, например, если ваша почта user@yandex.ru,
# то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'ahjnjciwibkdrkpq'  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках,
# но включать его здесь обязательно

LOGGING = {
    'version': 1,
    'disable_existing_logger': False,
    'loggers': {
        'django': {
            'handlers': ['path', 'stack', 'console', 'write_in_file_one'],
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['stack', 'mail_admins'],
            'level': 'ERROR',
        },
        'django.server': {
            'handlers': ['stack', 'mail_admins'],
            'level': 'ERROR',
        },
        'django.template': {
            'handlers': ['stack'],
            'level': 'ERROR',
        },
        'django.db_backends': {
            'handlers': ['stack'],
            'level': 'ERROR',
        },
        'django.security': {
            'handlers': ['security_error'],
        }
    },
    'handlers': {
        'write_in_file_one': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'with_module',
            'filters': ['require_debug_true'],
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'form_for_console',
            'filters': ['require_debug_true'],
        },
        'path': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'form_for_console_and_path',
        },
        'stack': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'form_for_console_path_and_stack',
            'filename': 'error.log'
        },
        'security_error': {
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'with_module',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'form_for_console_and_path',
            'filters': ['require_debug_false'],
        }
    },
    'formatters': {
        'form_for_console': {
            'format': '{asctime} {levelname} {message}',
            'datetime': '%Y.%m.%d %H:%M:%s',
            'style': '{',
        },
        'form_for_console_and_path': {
            'format': '{asctime} {levelname} {pathname} {message}',
            'datetime': '%Y.%m.%d %H:%M:%s',
            'style': '{',
        },
        'form_for_console_path_and_stack': {
            'format': '{asctime} {levelname} {exc_info} {pathname} {message}',
            'datetime': '%Y.%m.%d %H:%M:%s',
            'style': '{',
        },
        'with_module': {
            'format': '{asctime} {levelname} {module} {message}',
            'datetime': '%Y.%m.%d %H:%M:%s',
            'style': '{',
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
}